// <auto-generated />
using System;
using Dashboard.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dashboard.DataAccess.Data.Migrations
{
    [DbContext(typeof(WebbanhangDbContext))]
    partial class WebbanhangDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Manager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manager");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__branches__3213E83F4514DD9B");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.BranchExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expense_type");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PaymentCycle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("MONTHLY")
                        .HasColumnName("payment_cycle");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("PK__branch_e__3213E83FC6B11CF5");

                    b.HasIndex("BranchId");

                    b.ToTable("branch_expenses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.BranchIngredientInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__branch_i__3213E83FCC79BFE6");

                    b.HasIndex("BranchId");

                    b.HasIndex("IngredientId");

                    b.ToTable("branch_ingredient_inventory");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83F081D2F09");

                    b.HasIndex(new[] { "Name" }, "UQ__categori__72E12F1BFB7E3EEA")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullname");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F99FE37C6");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.DeliveryStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__delivery__3213E83F906BA1F6");

                    b.HasIndex(new[] { "Name" }, "UQ__delivery__72E12F1BA335DE00")
                        .IsUnique();

                    b.ToTable("delivery_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position");

                    b.Property<DateOnly?>("ResignDate")
                        .HasColumnType("date")
                        .HasColumnName("resign_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("ACTIVE")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__employee__3213E83F2B6C67A0");

                    b.HasIndex("BranchId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.EmployeeSalary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Allowance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("allowance");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("base_salary");

                    b.Property<decimal?>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("bonus");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<decimal?>("Penalty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("penalty");

                    b.Property<string>("SalaryType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("MONTHLY")
                        .HasColumnName("salary_type");

                    b.Property<decimal?>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.1m)
                        .HasColumnName("tax_rate");

                    b.HasKey("Id")
                        .HasName("PK__employee__3213E83FD6680FE2");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_salaries");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.EmployeeShift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PRESENT")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__employee__3213E83FD6C7B96C");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_shifts");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ExpensesSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("ExpenseAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_after_tax");

                    b.Property<decimal>("ExpenseBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_before_tax");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_type");

                    b.Property<string>("PeriodValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_value");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<int>("TotalIngredients")
                        .HasColumnType("int")
                        .HasColumnName("total_ingredients");

                    b.Property<int>("TotalPurchaseOrders")
                        .HasColumnType("int")
                        .HasColumnName("total_purchase_orders");

                    b.HasKey("Id")
                        .HasName("PK__expenses__3213E83F27D3985C");

                    b.HasIndex("BranchId");

                    b.ToTable("expenses_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<long>("GrnId")
                        .HasColumnType("bigint")
                        .HasColumnName("grn_id");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<decimal>("OrderedQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ordered_quantity");

                    b.Property<string>("QualityStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("ACCEPTED")
                        .HasColumnName("quality_status");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("received_quantity");

                    b.Property<decimal?>("RejectedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("rejected_quantity");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("storage_location");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__goods_re__3213E83FB45A7D74");

                    b.HasIndex("GrnId");

                    b.HasIndex("IngredientId");

                    b.ToTable("goods_received_details");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeliveryNoteNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("delivery_note_number");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("driver_name");

                    b.Property<string>("GrnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grn_code");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<DateTime?>("ReceivedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("received_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("status_id");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalQuantityOrdered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_quantity_ordered");

                    b.Property<decimal?>("TotalQuantityReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_quantity_received");

                    b.Property<decimal?>("TotalQuantityRejected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_quantity_rejected");

                    b.Property<string>("VehicleNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vehicle_number");

                    b.Property<long?>("WarehouseStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_staff_id");

                    b.HasKey("Id")
                        .HasName("PK__goods_re__3213E83FC2694A22");

                    b.HasIndex("BranchId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseStaffId");

                    b.HasIndex(new[] { "GrnCode" }, "UQ__goods_re__D27DBA9E53D946EE")
                        .IsUnique();

                    b.ToTable("goods_received_notes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__goods_re__3213E83F8F12AE54");

                    b.HasIndex(new[] { "Name" }, "UQ__goods_re__72E12F1B5B4629D9")
                        .IsUnique();

                    b.ToTable("goods_received_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<long?>("TaxId")
                        .HasColumnType("bigint")
                        .HasColumnName("tax_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83FBDC4B752");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxId");

                    b.ToTable("ingredients");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83F71C1F796");

                    b.ToTable("ingredient_categories");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("expected_delivery_date");

                    b.Property<decimal?>("FinalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("final_amount");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("purchase_order_code");

                    b.Property<long?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("status_id");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalAmountAfterTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount_after_tax");

                    b.Property<decimal?>("TotalAmountBeforeTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount_before_tax");

                    b.Property<decimal?>("TotalTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_tax_amount");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83F117A1FF1");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "PurchaseOrderCode" }, "UQ__ingredie__19DA46F1B121FE7C")
                        .IsUnique();

                    b.ToTable("ingredient_purchase_orders");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<long>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_price");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83F1DCD047F");

                    b.HasIndex("IngredientId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("ingredient_purchase_order_details");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83F69D4D00C");

                    b.HasIndex("BranchId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ingredient_transfers");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientWarehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__ingredie__3213E83FA666C6E1");

                    b.HasIndex("IngredientId");

                    b.ToTable("ingredient_warehouse");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InventoryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ReferenceType", "ReferenceId");

                    b.HasIndex("BranchId", "IngredientId", "MovementDate");

                    b.ToTable("inventory_movements");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InventoryThreshold", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AverageDailyConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCalculatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("int");

                    b.Property<decimal>("MaximumStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReorderPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SafetyStock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("BranchId", "IngredientId")
                        .IsUnique();

                    b.ToTable("inventory_thresholds");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InvoiceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__invoice___3213E83F06395854");

                    b.HasIndex(new[] { "Name" }, "UQ__invoice___72E12F1B28814C66")
                        .IsUnique();

                    b.ToTable("invoice_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("order_code");

                    b.Property<string>("OrderUuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("order_uuid")
                        .IsFixedLength();

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_money");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83F663C9EB0");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "OrderUuid" }, "UQ__orders__3DE398663640EAE7")
                        .IsUnique();

                    b.HasIndex(new[] { "OrderCode" }, "UQ__orders__99D12D3FB3E1E0BA")
                        .IsUnique();

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderDeliveryTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeliveryPersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_person_id");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("estimated_delivery");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long?>("ShippingProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("shipping_provider_id");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tracking_number");

                    b.HasKey("Id")
                        .HasName("PK__order_de__3213E83F5863CFF7");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("order_delivery_tracking");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__order_de__3213E83F4CE42D1D");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("payment_date");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_status_id");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("PK__order_pa__3213E83F1BEAD382");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("order_payments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderShipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("estimated_delivery_date");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("shipping_address");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("shipping_cost");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipping_method");

                    b.Property<long?>("ShippingProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("shipping_provider_id");

                    b.HasKey("Id")
                        .HasName("PK__order_sh__3213E83F6D88CAE2");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("order_shipments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__order_st__3213E83FB26D3DF0");

                    b.HasIndex(new[] { "Name" }, "UQ__order_st__72E12F1B05345EFE")
                        .IsUnique();

                    b.ToTable("order_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__payment___3213E83F9BB41367");

                    b.HasIndex(new[] { "Name" }, "UQ__payment___72E12F1BEC94A5AC")
                        .IsUnique();

                    b.ToTable("payment_methods");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__payment___3213E83F2EAECF1C");

                    b.HasIndex(new[] { "Name" }, "UQ__payment___72E12F1B7D0643E4")
                        .IsUnique();

                    b.ToTable("payment_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Payroll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("allowance");

                    b.Property<decimal?>("BaseSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("base_salary");

                    b.Property<decimal?>("Bonus")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("bonus");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<decimal?>("GrossSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("gross_salary");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("net_salary");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("penalty");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal?>("TotalWorkingHours")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_working_hours");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("PK__payrolls__3213E83F432AAB89");

                    b.HasIndex("EmployeeId");

                    b.ToTable("payrolls");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<long?>("TaxId")
                        .HasColumnType("bigint")
                        .HasColumnName("tax_id");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id")
                        .HasName("PK__products__3213E83FAB8FAA1E");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("image_url");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__product___3213E83FD8C6F7A9");

                    b.HasIndex("ProductId");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProductRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__product___3213E83FA96E90A9");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_recipes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProfitSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("ExpenseAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_after_tax");

                    b.Property<decimal>("ExpenseBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_before_tax");

                    b.Property<decimal>("InputTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("input_tax");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<decimal>("OutputTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("output_tax");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_type");

                    b.Property<string>("PeriodValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_value");

                    b.Property<decimal>("ProfitAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("profit_after_tax");

                    b.Property<decimal>("ProfitBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("profit_before_tax");

                    b.Property<decimal>("RevenueAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_after_tax");

                    b.Property<decimal>("RevenueBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_before_tax");

                    b.Property<decimal>("VatToPay")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("vat_to_pay");

                    b.HasKey("Id")
                        .HasName("PK__profit_s__3213E83FBBCC3CFF");

                    b.HasIndex("BranchId");

                    b.ToTable("profit_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<DateTime?>("DueDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("due_date");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("invoice_code");

                    b.Property<DateTime>("InvoiceDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("invoice_date");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<decimal?>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("paid_amount");

                    b.Property<DateTime?>("PaymentDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("payment_reference");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal?>("RemainingAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("remaining_amount");

                    b.Property<long?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("status_id");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalAmountAfterTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount_after_tax");

                    b.Property<decimal?>("TotalAmountBeforeTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount_before_tax");

                    b.Property<decimal?>("TotalTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_tax_amount");

                    b.HasKey("Id")
                        .HasName("PK__purchase__3213E83F73ECDCDE");

                    b.HasIndex("BranchId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "InvoiceCode" }, "UQ__purchase__5ED70A355181E3E1")
                        .IsUnique();

                    b.ToTable("purchase_invoices");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseInvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AmountAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount_after_tax");

                    b.Property<decimal>("AmountBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount_before_tax");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<decimal?>("DiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_rate");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("final_amount");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_amount");

                    b.Property<decimal?>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_rate");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__purchase__3213E83F1FC51C06");

                    b.HasIndex("IngredientId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("purchase_invoice_details");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseOrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__purchase__3213E83FBD9D52EE");

                    b.HasIndex(new[] { "Name" }, "UQ__purchase__72E12F1B763CAB51")
                        .IsUnique();

                    b.ToTable("purchase_order_statuses");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("approval_date");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("approved_by");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreditNoteNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("credit_note_number");

                    b.Property<long?>("GrnId")
                        .HasColumnType("bigint")
                        .HasColumnName("grn_id");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<decimal?>("RefundAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("refund_amount");

                    b.Property<string>("ReturnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("return_code");

                    b.Property<DateTime?>("ReturnDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("return_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("return_reason");

                    b.Property<long?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("status_id");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalReturnAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_return_amount");

                    b.HasKey("Id")
                        .HasName("PK__purchase__3213E83FD75D4F59");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BranchId");

                    b.HasIndex("GrnId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "ReturnCode" }, "UQ__purchase__51FB33A06DB976E7")
                        .IsUnique();

                    b.ToTable("purchase_returns");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseReturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("QualityIssue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("quality_issue");

                    b.Property<decimal?>("ReturnAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("return_amount");

                    b.Property<long>("ReturnId")
                        .HasColumnType("bigint")
                        .HasColumnName("return_id");

                    b.Property<decimal>("ReturnQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("return_quantity");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("return_reason");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__purchase__3213E83FA0FB62AC");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ReturnId");

                    b.ToTable("purchase_return_details");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ServingSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Name")
                        .IsUnique();

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.RecipeIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("WastePercentage")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId", "IngredientId")
                        .IsUnique();

                    b.ToTable("recipe_ingredients");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83FDA1EB870");

                    b.HasIndex(new[] { "Name" }, "UQ__roles__72E12F1B8563DF69")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SalesSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_type");

                    b.Property<string>("PeriodValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_value");

                    b.Property<decimal>("RevenueAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_after_tax");

                    b.Property<decimal>("RevenueBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_before_tax");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("int")
                        .HasColumnName("total_orders");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int")
                        .HasColumnName("total_products");

                    b.HasKey("Id")
                        .HasName("PK__sales_su__3213E83FCC378A81");

                    b.HasIndex("BranchId");

                    b.ToTable("sales_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ShippingProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiEndpoint")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("api_endpoint");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("contact_info");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__shipping__3213E83F7B4A3DDF");

                    b.HasIndex(new[] { "Name" }, "UQ__shipping__72E12F1B8D36D97F")
                        .IsUnique();

                    b.ToTable("shipping_providers");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SocialAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("provider");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__social_a__3213E83F4D3B725E");

                    b.HasIndex("UserId");

                    b.ToTable("social_accounts");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__supplier__3213E83FD72856BA");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SupplierIngredientPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("effective_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("expired_date");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("PK__supplier__3213E83FCBEFFDFF");

                    b.HasIndex("IngredientId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_ingredient_prices");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SupplierPerformance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EvaluationPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("evaluation_period");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LateDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("late_deliveries");

                    b.Property<int?>("OnTimeDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("on_time_deliveries");

                    b.Property<decimal?>("OverallRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("overall_rating");

                    b.Property<string>("PeriodValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_value");

                    b.Property<decimal?>("QualityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("quality_score");

                    b.Property<decimal?>("ReturnValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("return_value");

                    b.Property<decimal?>("ServiceScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("service_score");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount");

                    b.Property<int?>("TotalOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_orders");

                    b.Property<int?>("TotalReturns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_returns");

                    b.HasKey("Id")
                        .HasName("PK__supplier__3213E83F241CD2A2");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_performance");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Taxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("tax_rate");

                    b.HasKey("Id")
                        .HasName("PK__taxes__3213E83F92587024");

                    b.ToTable("taxes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit")
                        .HasColumnName("expired");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit")
                        .HasColumnName("revoked");

                    b.Property<string>("Token1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<string>("TokenType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("token_type");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__tokens__3213E83F23FD3269");

                    b.HasIndex("UserId");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<long?>("FacebookAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("facebook_account_id");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<long?>("GoogleAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("google_account_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastModified")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83FDE9A3EE9");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VEmployeePayroll", b =>
                {
                    b.Property<decimal?>("BaseSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("base_salary");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("branch_name");

                    b.Property<DateOnly?>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("gross_salary");

                    b.Property<string>("PositionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("position_name");

                    b.Property<string>("SalaryType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("salary_type");

                    b.Property<decimal>("TotalAllowances")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_allowances");

                    b.Property<decimal>("TotalBonus")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_bonus");

                    b.Property<decimal>("TotalDeductions")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_deductions");

                    b.HasIndex("EmployeeId");

                    b.ToTable("v_employee_payroll");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VExpensesSummary", b =>
                {
                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<decimal>("ExpenseAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_after_tax");

                    b.Property<decimal>("ExpenseBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_before_tax");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("period");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalIngredients")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_ingredients");

                    b.Property<int>("TotalPurchaseOrders")
                        .HasColumnType("int")
                        .HasColumnName("total_purchase_orders");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasIndex("BranchId");

                    b.ToTable("v_expenses_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VInventoryStatus", b =>
                {
                    b.Property<decimal>("AvailableQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("available_quantity");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("branch_name");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ingredient_name");

                    b.Property<DateTime>("LastUpdated")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("last_updated");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location_name");

                    b.Property<decimal?>("MinimumStock")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("minimum_stock");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity_on_hand");

                    b.Property<decimal>("QuantityReserved")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("quantity_reserved");

                    b.Property<string>("StockStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("stock_status");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit_of_measure");

                    b.HasIndex("BranchId");

                    b.HasIndex("IngredientId");

                    b.ToTable("v_inventory_status");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VProfitSummary", b =>
                {
                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<decimal>("ExpenseAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_after_tax");

                    b.Property<decimal>("ExpenseBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("expense_before_tax");

                    b.Property<decimal>("InputTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("input_tax");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<decimal>("OutputTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("output_tax");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("period");

                    b.Property<decimal>("ProfitAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("profit_after_tax");

                    b.Property<decimal>("ProfitBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("profit_before_tax");

                    b.Property<decimal>("RevenueAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_after_tax");

                    b.Property<decimal>("RevenueBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_before_tax");

                    b.Property<decimal>("VatToPay")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("vat_to_pay");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasIndex("BranchId");

                    b.ToTable("v_profit_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VSalesSummary", b =>
                {
                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("period");

                    b.Property<decimal>("RevenueAfterTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_after_tax");

                    b.Property<decimal>("RevenueBeforeTax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("revenue_before_tax");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("int")
                        .HasColumnName("total_orders");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int")
                        .HasColumnName("total_products");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasIndex("BranchId");

                    b.ToTable("v_sales_summary");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.BranchExpense", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("BranchExpenses")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_branch_expenses_branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.BranchIngredientInventory", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("BranchIngredientInventories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_bii_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("BranchIngredientInventories")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_bii_ingredient");

                    b.Navigation("Branch");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Customer", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.User", "IdNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("Dashboard.DataAccess.Models.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_customers_users");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Employee", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_employees_branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_salaries_employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.EmployeeShift", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeShifts")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_shifts_employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ExpensesSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("ExpensesSummaries")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_expenses_summary_branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedDetail", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.GoodsReceivedNote", "Grn")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("GrnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_grn_detail_grn");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_grn_detail_ingredient");

                    b.Navigation("Grn");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedNote", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_grn_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", "Invoice")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_grn_invoice");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", "PurchaseOrder")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_grn_purchase_order");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.GoodsReceivedStatus", "Status")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_grn_status");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_grn_supplier");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "WarehouseStaff")
                        .WithMany("GoodsReceivedNotes")
                        .HasForeignKey("WarehouseStaffId")
                        .HasConstraintName("FK_grn_warehouse_staff");

                    b.Navigation("Branch");

                    b.Navigation("Invoice");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Status");

                    b.Navigation("Supplier");

                    b.Navigation("WarehouseStaff");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Ingredient", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.IngredientCategory", "Category")
                        .WithMany("Ingredients")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_ingredients_ingredient_categories");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Taxes", "Tax")
                        .WithMany("Ingredients")
                        .HasForeignKey("TaxId")
                        .HasConstraintName("FK_ingredients_taxes");

                    b.Navigation("Category");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("IngredientPurchaseOrders")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_purchase_order_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany("IngredientPurchaseOrders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_purchase_order_employee");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PurchaseOrderStatus", "Status")
                        .WithMany("IngredientPurchaseOrders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_purchase_order_status");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("IngredientPurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_purchase_order_supplier");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrderDetail", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientPurchaseOrderDetails")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_ipod_ingredients");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", "PurchaseOrder")
                        .WithMany("IngredientPurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ipod_purchase_orders");

                    b.Navigation("Ingredient");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientTransfer", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("IngredientTransfers")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_transfer_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientTransfers")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_transfer_ingredient");

                    b.Navigation("Branch");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientWarehouse", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientWarehouses")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_ingredient_warehouse");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InventoryMovement", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InventoryThreshold", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("InventoryThresholds")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Order", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_orders_branches");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_orders_customers");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_orders_order_status");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderDeliveryTracking", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "DeliveryPerson")
                        .WithMany("OrderDeliveryTrackings")
                        .HasForeignKey("DeliveryPersonId")
                        .HasConstraintName("FK_tracking_employees");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Order", "Order")
                        .WithMany("OrderDeliveryTrackings")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_tracking_orders");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.ShippingProvider", "ShippingProvider")
                        .WithMany("OrderDeliveryTrackings")
                        .HasForeignKey("ShippingProviderId")
                        .HasConstraintName("FK_tracking_providers");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.DeliveryStatus", "Status")
                        .WithMany("OrderDeliveryTrackings")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_tracking_status");

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Order");

                    b.Navigation("ShippingProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FKjyu2qbqt8gnvno9oe9j2s2ldk");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK4q98utpd73imf4yhttm3w0eax");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderPayment", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_order_payments_orders");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("OrderPayments")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_order_payments_payment_methods");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("OrderPayments")
                        .HasForeignKey("PaymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_order_payments_payment_statuses");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderShipment", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Order", "Order")
                        .WithMany("OrderShipments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_order_shipments_orders");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.ShippingProvider", "ShippingProvider")
                        .WithMany("OrderShipments")
                        .HasForeignKey("ShippingProviderId")
                        .HasConstraintName("FK_order_shipments_shipping_providers");

                    b.Navigation("Order");

                    b.Navigation("ShippingProvider");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Payroll", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany("Payrolls")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_payroll_employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Product", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_products_categories");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Taxes", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .HasConstraintName("FK_products_taxes");

                    b.Navigation("Category");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProductImage", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FKqnq71xsohugpqwf3c9gxmsuy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProductRecipe", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("ProductRecipes")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_recipe_ingredient");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Product", "Product")
                        .WithMany("ProductRecipes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_recipe_product");

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ProfitSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("ProfitSummaries")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_profit_summary_branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_invoice_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_invoice_purchase_order");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.InvoiceStatus", "Status")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_invoice_status");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_invoice_supplier");

                    b.Navigation("Branch");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseInvoiceDetail", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_invoice_detail_ingredient");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", "Invoice")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_invoice_detail_invoice");

                    b.Navigation("Ingredient");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "ApprovedByNavigation")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_return_approved_by");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_return_branch");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.GoodsReceivedNote", "Grn")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("GrnId")
                        .HasConstraintName("FK_return_grn");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", "Invoice")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_return_invoice");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_return_supplier");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Branch");

                    b.Navigation("Grn");

                    b.Navigation("Invoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseReturnDetail", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_return_detail_ingredient");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.PurchaseReturn", "Return")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_return_detail_return");

                    b.Navigation("Ingredient");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Recipe", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Product", "Product")
                        .WithMany("Recipes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SalesSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany("SalesSummaries")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_sales_summary_branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SocialAccount", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.User", "User")
                        .WithMany("SocialAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK6rmxxiton5yuvu7ph2hcq2xn7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SupplierIngredientPrice", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("SupplierIngredientPrices")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_sip_ingredient");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("SupplierIngredientPrices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_sip_supplier");

                    b.Navigation("Ingredient");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.SupplierPerformance", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Supplier", "Supplier")
                        .WithMany("SupplierPerformances")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_performance_supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Token", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK2dylsfo39lgjyqml2tbe0b0ss");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.User", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_users_employees");

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_users_roles");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VEmployeePayroll", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VExpensesSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VInventoryStatus", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.DataAccess.Models.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VProfitSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.VSalesSummary", b =>
                {
                    b.HasOne("Dashboard.DataAccess.Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Branch", b =>
                {
                    b.Navigation("BranchExpenses");

                    b.Navigation("BranchIngredientInventories");

                    b.Navigation("Employees");

                    b.Navigation("ExpensesSummaries");

                    b.Navigation("GoodsReceivedNotes");

                    b.Navigation("IngredientPurchaseOrders");

                    b.Navigation("IngredientTransfers");

                    b.Navigation("Orders");

                    b.Navigation("ProfitSummaries");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("SalesSummaries");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.DeliveryStatus", b =>
                {
                    b.Navigation("OrderDeliveryTrackings");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeSalaries");

                    b.Navigation("EmployeeShifts");

                    b.Navigation("GoodsReceivedNotes");

                    b.Navigation("IngredientPurchaseOrders");

                    b.Navigation("OrderDeliveryTrackings");

                    b.Navigation("Payrolls");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedNote", b =>
                {
                    b.Navigation("GoodsReceivedDetails");

                    b.Navigation("PurchaseReturns");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.GoodsReceivedStatus", b =>
                {
                    b.Navigation("GoodsReceivedNotes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Ingredient", b =>
                {
                    b.Navigation("BranchIngredientInventories");

                    b.Navigation("GoodsReceivedDetails");

                    b.Navigation("IngredientPurchaseOrderDetails");

                    b.Navigation("IngredientTransfers");

                    b.Navigation("IngredientWarehouses");

                    b.Navigation("InventoryMovements");

                    b.Navigation("InventoryThresholds");

                    b.Navigation("ProductRecipes");

                    b.Navigation("PurchaseInvoiceDetails");

                    b.Navigation("PurchaseReturnDetails");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("SupplierIngredientPrices");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientCategory", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.IngredientPurchaseOrder", b =>
                {
                    b.Navigation("GoodsReceivedNotes");

                    b.Navigation("IngredientPurchaseOrderDetails");

                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.InvoiceStatus", b =>
                {
                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderDeliveryTrackings");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderPayments");

                    b.Navigation("OrderShipments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PaymentStatus", b =>
                {
                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductRecipes");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseInvoice", b =>
                {
                    b.Navigation("GoodsReceivedNotes");

                    b.Navigation("PurchaseInvoiceDetails");

                    b.Navigation("PurchaseReturns");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseOrderStatus", b =>
                {
                    b.Navigation("IngredientPurchaseOrders");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnDetails");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.ShippingProvider", b =>
                {
                    b.Navigation("OrderDeliveryTrackings");

                    b.Navigation("OrderShipments");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Supplier", b =>
                {
                    b.Navigation("GoodsReceivedNotes");

                    b.Navigation("IngredientPurchaseOrders");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("SupplierIngredientPrices");

                    b.Navigation("SupplierPerformances");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.Taxes", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Dashboard.DataAccess.Models.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("SocialAccounts");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
