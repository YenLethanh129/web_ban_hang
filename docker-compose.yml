x-logging:
  &default-logging
  options:
    max-size: "100k"
    max-file: "5"
  driver: json-file

networks:
  app-network:
    name: app-network  
    driver: bridge


services:
  # 
  cloudflared:
    image: cloudflare/cloudflared:1767-80b1634515ba
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    depends_on:
      - traefik
    networks:
      - app-network
    volumes:
      - ./App/cloudflare/data/cert.pem:${TUNNEL_ORIGIN_CERT}
      - ./App/cloudflare/data/${TUNNEL_ID}.json:/etc/cloudflared/${TUNNEL_ID}.json:ro
      - ./App/cloudflare/config/config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel run  
    logging: *default-logging

  traefik:
    image: traefik:v3.5.2
    container_name: traefik
    restart: unless-stopped
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"

      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolver=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesResolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=20"

      - "--certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/var/traefik/certs/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=kythuat.vn"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.kythuat.vn"

      # - "--metrics.prometheus=true"
      # - "--metrics.prometheus.addEntryPointsLabels=true"
      # - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_API_EMAIL=${CF_API_EMAIL}
    volumes:
      - ./App/ReverseProxy/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./App/ReverseProxy/config/middlewares.yml:/etc/traefik/middlewares.yml:ro
      - ./App/ReverseProxy/data/traefik/certs:/var/traefik/certs:rw 
      - ./App/ReverseProxy/data/traefik/log:/var/log/traefik:rw
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - app-network
    logging: *default-logging

  otp-service:
    build:
      context: ./App/OTP-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports: 
      - "8081:8080"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - REDIS_CONNECTION_STRING=${REDIS_HOST}:${REDIS_PORT}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SMS_SANDBOX_PHONE_NUMBER=${SMS_SANDBOX_PHONE_NUMBER}
      - OTP_EXPIRATION_MINUTES=${OTP_EXPIRATION_MINUTES}
      - OTP_LENGTH=${OTP_LENGTH}
      - OTP_MAX_VERIFICATION_ATTEMPTS=${OTP_MAX_VERIFICATION_ATTEMPTS}

      - RATE_LIMIT_MAX_REQUESTS_PER_HOUR=${RATE_LIMIT_MAX_REQUESTS_PER_HOUR}
      - RATE_LIMIT_MAX_REQUESTS_PER_DAY=${RATE_LIMIT_MAX_REQUESTS_PER_DAY}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.otp.rule=Host(`otp.kythuat.vn`)"
      - "traefik.http.routers.otp.entrypoints=websecure"
      - "traefik.http.routers.otp.service=otp"
      - "traefik.http.services.otp.loadbalancer.server.port=8080"
      # Health check configuration
      - "traefik.http.services.otp.loadbalancer.healthcheck.scheme=http"
      - "traefik.http.services.otp.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.otp.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.otp.loadbalancer.healthcheck.timeout=5s"
    volumes:
      - ./.env:/app/.env:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging: *default-logging

  frontend:
    image: node:20-alpine
    working_dir: /app 
    volumes:
      - ./App/angular:/app
      - /app/node_modules
    command: sh -c "npm install && npm start -- --host 0.0.0.0 --disable-host-check"
    ports:
      - "4200:4200"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    labels:
    - "traefik.enable=true"
    - "traefik.docker.network=app-network"
    - "traefik.http.routers.angular.rule=Host(`webbanhang.kythuat.vn`)"
    - "traefik.http.routers.angular.entrypoints=websecure"
    - "traefik.http.routers.angular.service=angular-service"
    # - "traefik.http.routers.angular.middlewares=secureHeaders@file,cloudflareRealIp@file"
    - "traefik.http.services.angular-service.loadbalancer.server.port=4200"

    networks:
      - app-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200", "||", "exit", "1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    logging: *default-logging

  backend:
    build:
      context: ./App/backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      webbanhang-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      SERVER_PORT: ${SERVER_PORT}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_HIBERNATE_PROPERTIES_DIALECT}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      # Server configuration
      SERVER_ADDRESS: 0.0.0.0
      JAVA_OPTS: "-Xmx512m -Xms256m -Dserver.address=0.0.0.0"
    volumes:
      - ./App/backend:/app
      - ~/.m2:/root/.m2
    working_dir: /app
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network" 
      - "traefik.http.routers.backend.rule=Host(`api.kythuat.vn`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.service=backend-service"
      # - "traefik.http.routers.backend.middlewares=secureHeaders@file,cloudflareRealIp@file" 
      - "traefik.http.services.backend-service.loadbalancer.server.port=1609"
    command: >
      mvn spring-boot:run
      -Dspring-boot.run.fork=false
      -DskipTests
      -Djava.security.egd=file:/dev/./urandom
    networks:
      - app-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:1609/actuator/health", "||", "exit", "1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 120s
    logging: *default-logging

  report-worker:
    build:
      context: ./App/Dashboard
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      webbanhang-db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging


  # Infrastructure services
  webbanhang-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: webbanhang-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - 1433:1433
    volumes:
      - webbanhang_data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - app-network
    logging: *default-logging

  webbanhang-db.configurator:
    build:
      context: ./App/webbanhang-db/
      dockerfile: Dockerfile
    container_name: webbanhang-db.configurator
    volumes:
      - ./App/webbanhang-db/init:/init-sql
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - DB_NAME=${DB_NAME}
      - APP_USER_LOGIN_PASSWORD=${APP_USER_LOGIN_PASSWORD}
      - APP_USER=${APP_USER}
    depends_on:
      webbanhang-db:
        condition: service_healthy
    command: >
      bash -c '
      envsubst < /init-sql/init_db.sql > /tmp/init_db_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d master -i /tmp/init_db_parsed.sql &&
      envsubst < /init-sql/init_schema.sql > /tmp/init_schema_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d ${DB_NAME} -i /tmp/init_schema_parsed.sql &&
      envsubst < /init-sql/init_seed_data.sql > /tmp/init_seed_data_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d ${DB_NAME} -i /tmp/init_seed_data_parsed.sql &&
      rm -f /tmp/*_parsed.sql && echo "All done!"'
    networks:
      - app-network
    logging: *default-logging

  redis:
    image: redis:8.0-rc1
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - cache_data:/data
    restart: unless-stopped
    networks:
      - app-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Monitoring services
  # prometheus:
  #   image: prom/prometheus:v2.47.0
  #   container_name: prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./App/Monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - ./App/Monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
  #     - prometheus-data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #     - '--web.enable-admin-api'
  #     - '--storage.tsdb.retention.time=30d'
  #     - '--storage.tsdb.retention.size=10GB'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=app-network"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.kythuat.vn`)"
  #     - "traefik.http.routers.prometheus.entrypoints=websecure"
  #     - "traefik.http.routers.prometheus.service=prometheus"
  #     - "traefik.http.routers.prometheus.middlewares=auth-basic@file"
  #     - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
  #   networks:
  #     - app-network
  #   logging: *default-logging

  # grafana:
  #   image: grafana/grafana:10.1.0
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #     - GF_SECURITY_ALLOW_EMBEDDING=true
  #     - GF_SECURITY_COOKIE_SECURE=true
  #     - GF_SECURITY_COOKIE_SAMESITE=strict
  #     - GF_SERVER_ROOT_URL=https://monitor.kythuat.vn
  #     - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - ./App/Monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
  #     - ./App/Monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=app-network"
  #     - "traefik.http.routers.grafana.rule=Host(`monitor.kythuat.vn`)"
  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.service=grafana"
  #     - "traefik.http.routers.grafana.middlewares=secureHeaders@file"
  #     - "traefik.http.services.grafana.loadbalancer.server.port=3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app-network
  #   logging: *default-logging

  # # Node Exporter để collect system metrics
  # node-exporter:
  #   image: prom/node-exporter:v1.6.1
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - app-network
  #   logging: *default-logging

  # # cAdvisor để monitor containers
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.47.0
  #   container_name: cadvisor
  #   restart: unless-stopped
  #   privileged: true
  #   devices:
  #     - /dev/kmsg:/dev/kmsg
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /cgroup:/cgroup:ro
  #   ports:
  #     - "8082:8080"
  #   networks:
  #     - app-network
  #   logging: *default-logging

  # # AlertManager để gửi alerts
  # alertmanager:
  #   image: prom/alertmanager:v0.25.0
  #   container_name: alertmanager
  #   restart: unless-stopped
  #   volumes:
  #     - ./App/Monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
  #     - alertmanager-data:/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #     - '--web.external-url=https://alerts.kythuat.vn'
  #   ports:
  #     - "9093:9093"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=app-network"
  #     - "traefik.http.routers.alertmanager.rule=Host(`alerts.kythuat.vn`)"
  #     - "traefik.http.routers.alertmanager.entrypoints=websecure"
  #     - "traefik.http.routers.alertmanager.middlewares=auth-basic@file"
  #     - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
  #   networks:
  #     - app-network
  #   logging: *default-logging

  # redis-exporter:
  #   image: oliver006/redis_exporter:v1.54.0
  #   container_name: redis-exporter
  #   restart: unless-stopped
  #   environment:
  #     - REDIS_ADDR=redis:6379
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #   ports:
  #     - "9121:9121"
  #   depends_on:
  #     - redis
  #   networks:
  #     - app-network
  #   logging: *default-logging

volumes:
  webbanhang_data:
  maven-repo:
  cache_data:
  # prometheus-data:
  # grafana-data:
  # alertmanager-data: