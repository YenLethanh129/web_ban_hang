x-logging:
  &default-logging
  options:
    max-size: "100k"
    max-file: "5"
  driver: json-file

services:
  traefik:
    image: traefik:v3.5.2
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - ACME_CA_SERVER=${ACME_CA_SERVER}
    volumes:
      - ./App/ReverseProxy/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./App/ReverseProxy/config/middlewares.yml:/etc/traefik/middlewares.yml:ro
      - ./App/ReverseProxy/data/traefik/certs:/var/traefik/certs:rw 
      - ./App/ReverseProxy/data/traefik/log:/var/log/traefik:rw
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - app-network
    logging: *default-logging

  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./App/angular:/app
      - /app/node_modules
    command: sh -c "npm install && npm start -- --host 0.0.0.0 --disable-host-check"
    ports:
      - "4200:4200"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    labels:
    - "traefik.enable=true"
    - "traefik.docker.network=app-network"
    - "traefik.http.routers.angular.rule=Host(`webbanhang.kythuat.vn`)"
    - "traefik.http.routers.angular.entrypoints=web"
    - "traefik.http.routers.angular.service=angular-service"
    # - "traefik.http.routers.angular.middlewares=secureHeaders@file,cloudflareRealIp@file"
    - "traefik.http.services.angular-service.loadbalancer.server.port=4200"

    networks:
      - app-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200", "||", "exit", "1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    logging: *default-logging

  backend:
    build:
      context: ./App/backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      webbanhang-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      SERVER_PORT: ${SERVER_PORT}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_HIBERNATE_PROPERTIES_DIALECT}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      # Server configuration
      SERVER_ADDRESS: 0.0.0.0
      JAVA_OPTS: "-Xmx512m -Xms256m -Dserver.address=0.0.0.0"
    volumes:
      - ./App/backend:/app
      - ~/.m2:/root/.m2
    working_dir: /app
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network" 
      - "traefik.http.routers.backend.rule=Host(`api.kythuat.vn`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.service=backend-service"
      # - "traefik.http.routers.backend.middlewares=secureHeaders@file,cloudflareRealIp@file" 
      - "traefik.http.services.backend-service.loadbalancer.server.port=1609"
    command: >
      mvn spring-boot:run
      -Dspring-boot.run.fork=false
      -DskipTests
      -Djava.security.egd=file:/dev/./urandom
    networks:
      - app-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:1609/actuator/health", "||", "exit", "1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 120s
    logging: *default-logging

  cloudflared:
    image: cloudflare/cloudflared:1767-80b1634515ba
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    depends_on:
      - traefik
    networks:
      - app-network
    volumes:
      - ./App/cloudflare/data/cert.pem:${TUNNEL_ORIGIN_CERT}
      - ./App/cloudflare/data/${TUNNEL_ID}.json:/etc/cloudflared/${TUNNEL_ID}.json:ro
      - ./App/cloudflare/config/config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel run  
    logging: *default-logging

  webbanhang-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: webbanhang-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - 1433:1433
    volumes:
      - webbanhang_data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - app-network
    logging: *default-logging

  otp-service:
    build:
      context: ./App/OTP-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports: 
      - "8081:8080"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ConnectionStrings__Redis=redis:6379
      - SpeedSMS__AccessToken=${SpeedSMS__AccessToken}
      - SpeedSMS__Type=${SpeedSMS__Type:-2}
      - SpeedSMS__BrandName=${SpeedSMS__BrandName:-OTP-Service}
      - OTPDefaultLength=${OTPDefaultLength:-6}
      - OTPDefaultExpirationMinutes=${OTPDefaultExpirationMinutes:-5}
      - OTP__MaxExpirationMinutes=${OTP__MaxExpirationMinutes:-30}
      - SMS__DefaultMessage=${SMS__DefaultMessage}
      - RateLimitMaxRequestsPerHour=${RateLimitMaxRequestsPerHour:-5}
      - RateLimitMaxRequestsPerDay=${RateLimitMaxRequestsPerDay:-20}
      - CORS__AllowedOrigins=${CORS__AllowedOrigins}
      - SERVER_PORT=${SERVER_PORT:-8080}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.otp-service.rule=Host(`otp.kythuat.vn`)"
      - "traefik.http.routers.otp-service.entrypoints=web"
      - "traefik.http.routers.otp-service.service=otp-service"
      - "traefik.http.services.otp-service.loadbalancer.server.port=8080"
      - "traefik.http.services.otp-service.loadbalancer.healthcheck.scheme=http"
      - "traefik.http.services.otp-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.otp-service.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.otp-service.loadbalancer.healthcheck.timeout=5s"
    volumes:
      - ./.env:/app/.env:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5  # Increased retries
      start_period: 60s  # Increased start period
    logging: *default-logging


  webbanhang-db.configurator:
    build:
      context: ./App/webbanhang-db/
      dockerfile: Dockerfile
    container_name: webbanhang-db.configurator
    volumes:
      - ./App/webbanhang-db/init:/init-sql
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - DB_NAME=${DB_NAME}
      - APP_USER_LOGIN_PASSWORD=${APP_USER_LOGIN_PASSWORD}
      - APP_USER=${APP_USER}
    depends_on:
      webbanhang-db:
        condition: service_healthy
    command: >
      bash -c '
      envsubst < /init-sql/init_db.sql > /tmp/init_db_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d master -i /tmp/init_db_parsed.sql &&
      envsubst < /init-sql/init_schema.sql > /tmp/init_schema_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d ${DB_NAME} -i /tmp/init_schema_parsed.sql &&
      envsubst < /init-sql/init_seed_data.sql > /tmp/init_seed_data_parsed.sql &&
      /opt/mssql-tools18/bin/sqlcmd -C -S webbanhang-db -U sa -P "$${SA_PASSWORD}" -d ${DB_NAME} -i /tmp/init_seed_data_parsed.sql &&
      rm -f /tmp/*_parsed.sql && echo "All done!"'
    networks:
      - app-network
    logging: *default-logging

  redis:
    image: redis:8.0-rc1
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - cache_data:/data
    restart: unless-stopped
    networks:
      - app-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  app-network:
    name: app-network  
    driver: bridge

volumes:
  webbanhang_data:
  maven-repo:
  cache_data: